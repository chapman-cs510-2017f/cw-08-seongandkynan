#!/usr/bin/env python3

'''This module includes julia method and JuliaPlane class. The complex plane generated by the parent Class (ArrayComplexPlane) will be transformed by a returned function by julia() method to create a Julia plane. After the Julia plane is created, the method toCSV exports the plane to a plane.csv file with the parameters being used for the plane. Another method fromCSV will be used to import the parameters saved in the .csv file back and re-generate the Julia plane again.
'''
import cplane_np
import numpy as np
import numba as nb
import pandas as pd
import matplotlib.pyplot as plt

def julia(c, max=100):
    '''The method julia() will take a complext number as an argument (c) and will return a function (f). The returned function will take an argument (z) and, depending on abs(z), will return an integer value.
    
    arguments:
        c: a complex number
        max: an integer

    returns: 
        f: a function. The returned function will take each value (z) of an existing plane and will transform it to an integer based on the following conditions. If abs(z) is bigger than 2, the function will return 1. If abs(2) is smaller than 2, it will run z = z**2 + +c, looping until it becomes bigger than 2. When it goes beyond 2, the function will return the number of the loop. However, if the number of loop reaches the maximum (100) before the Julia complex number gets bigger than 2, the function will stop and return 0. 
    '''
    @nb.vectorize([nb.int32(nb.complex128)])
    def f(z):
        if abs(z) > 2:
            return 1
        else:
            n = 0
            while (abs(z) <= 2):
                n+=1
                if n > max:
                    return 0
                z = z**2 + c
            return n
    return f

class JuliaPlane(cplane_np.ArrayComplexPlane):
    '''This class subclsses ArrayComplexPlane to generate its complex plane. After tha, it will creat a Julia plane using the Class argument (c) and the julia method. The class will include toCSV and fromCSV to export and import the Julia plane and its implementaiton parameters'''
    
    def __init__(self, c, xmin=-2, xmax=2, xlen=1000, ymin=-2, ymax=2, ylen=1000):
        '''The method will transform the plane created by the parent class to a Julia plane, when the class gets instantiated.
        
        arguments: 
            c: a complex humber
        '''
        self.c = c
        super().__init__(xmin, xmax, xlen, ymin, ymax, ylen)
        # print("initial plane: \n", self.plane)
        # self.plane = self.plane.applymap(julia(c))
        self.plane = julia(c)(self.plane)
        
    def show(self):
        '''This method will draw matplotlib's imshow plot using the integer numbers in self.plane.'''

        plt.imshow(self.plane, cmap = 'hot', interpolation='bicubic', extent=(self.xmin, self.xmax, self.ymin, self.ymax))
        plt.title("C = " + str(self.c))
        plt.colorbar(shrink=.94)
        plt.show()

    def toCSV(self, filename):
        '''This method will take a filename to export the Julia plane to a .csv file. It also exports the parameters that are used to create the Julia plane.
        arguemnts:
            filename: a string of a filename
        ''' 
        params = pd.Series( [self.c, self.xmin, self.xmax, self.xlen, self.ymin, self.ymax, self.ylen], index=['c','xmin','xmax','xlen', 'ymin', 'ymax', 'ylen'] )
        pd.DataFrame(params).T.to_csv(filename, sep='\t')
        with open(filename, 'a') as f:
            self.plane.to_csv(f, sep='\t', index=True)

    def fromCSV(self, filename):
        '''This method will take a filename to read a .csv file and import the parameters to re-generate the Julia plane stored in the .csv file. The imported parameters will be reassinged to the Class's attributes (xmin, xmax, xlen, ymin, ymax, ylen). After that, the method will create a list complex plane and transform it again using the julia method with the complex number (c). 
        arguments:
            filename: a string of a filename
        '''
        df = pd.read_csv(filename, sep='\t', nrows=1)
        self.c  = df['c'][0]
        self.xmin = df['xmin'][0]
        self.xmax = df['xmax'][0]
        self.xlen = df['xlen'][0]
        self.ymin = df['ymin'][0]
        self.ymax = df['ymax'][0]
        self.ylen = df['ylen'][0]

        self.refresh()
        self.plane = self.plane.applymap(julia(self.c))

def main():
    j = JuliaPlane(0)
    print("Julia Plane: \n", j.plane.head(5))
#     j.toCSV('plane.csv')
#     j.fromCSV('plane.csv')
#     print("After Import: \n", j.plane.head(5))
if __name__ == "__main__":
    main()

